1:"$Sreact.fragment"
2:I[7114,["874","static/chunks/874-3b2e13d78f8618dd.js","63","static/chunks/63-28726393f539b62f.js","177","static/chunks/app/layout-f5b71189e0bebc44.js"],"Header"]
3:I[7555,[],""]
4:I[1295,[],""]
6:I[9665,[],"OutletBoundary"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
d:I[6614,[],""]
:HL["/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/41898ed6967ed0c9.css","style"]
0:{"P":null,"b":"y4istOuZGKDWRsDTI_Hil","p":"","c":["","posts","install-cilium-eks"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","install-cilium-eks","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/41898ed6967ed0c9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":["$","script",null,{"async":true,"src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2657417531473772","crossOrigin":"anonymous"}]}],["$","body",null,{"className":"__className_f367f3 bg-white text-black dark:bg-zinc-900 dark:text-white","children":[["$","$L2",null,{}],["$","main",null,{"className":"max-w-6xl mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","install-cilium-eks","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5","$undefined",null,["$","$L6",null,{"children":["$L7","$L8",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","VyDmhf-UdE56LYL-mvvR7",{"children":[["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Lb",null,{"children":"$Lc"}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:I[6874,["874","static/chunks/874-3b2e13d78f8618dd.js","880","static/chunks/app/posts/%5Bid%5D/page-bb0e289bc5bd1f55.js"],""]
10:I[7161,["874","static/chunks/874-3b2e13d78f8618dd.js","880","static/chunks/app/posts/%5Bid%5D/page-bb0e289bc5bd1f55.js"],"default"]
f:T2e1f,<h2>Cilium CNI</h2>
<h3>Networking Mode</h3>
<p>Cilium에는 Networking Mode가 2가지로 구분된다.</p>
<ul>
<li>Overlay: 캡슐화 기반 가상 네트워크</li>
<li>Native routing: Linux Host의 라우팅 테이블을 사용</li>
</ul>
<h3>AWS VPC CNI Chaining</h3>
<p>AWS VPC CNI와 Chaining을 할 때는 위 두 모드 중에서 Native routing mode를 사용해야한다.</p>
<p>Native Routing에능 아래와 같은 내용이 적혀있다.</p>
<p>When to use this mode: This mode is for advanced users and requires some awareness of the underlying networking infrastructure. This mode works well with:</p>
<ul>
<li>Native IPv6 networks</li>
<li>In conjunction with cloud network routers</li>
<li>If you are already running routing daemons</li>
</ul>
<p>AWS VPC CNI를 사용하면 routing daemon을 AWS VPC CNI가 담당하기 때문에 overlay mode가 아닌 Native routing mode로 네트워킹을 선택해야한다.</p>
<h2>Install Cilium CNI in EKS</h2>
<h3>helm values</h3>
<pre><code class="hljs language-yaml"><span class="hljs-comment"># Kube-Proxy를 삭제할 경우 반드시 필요</span>
<span class="hljs-attr">k8sServiceHost:</span> { <span class="hljs-string">eks-api-endpoint</span> }
<span class="hljs-attr">k8sServicePort:</span> <span class="hljs-number">443</span>

<span class="hljs-attr">cluster:</span>
  <span class="hljs-attr">name:</span> { <span class="hljs-string">cluster</span> <span class="hljs-string">name</span> }
  <span class="hljs-attr">id:</span> <span class="hljs-number">1</span>

<span class="hljs-comment"># CNI 설정: VPC CNI와 chaining 모드로 사용</span>
<span class="hljs-attr">cni:</span>
  <span class="hljs-attr">chainingMode:</span> <span class="hljs-string">aws-cni</span> <span class="hljs-comment"># AWS CNI와 연결되는 chaining 모드 사용</span>
  <span class="hljs-attr">exclusive:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># aws-node DaemonSet도 계속 실행되도록 허용</span>

<span class="hljs-comment"># Cilium 설정: ENI 기반 라우팅을 사용하여 VPC와 통합</span>
<span class="hljs-attr">routingMode:</span> <span class="hljs-string">native</span> <span class="hljs-comment"># 네이티브 라우팅 모드를 사용하여 터널링을 비활성화합니다.</span>

<span class="hljs-comment"># Masquerade (SNAT) 설정: 필요한 경우에만 eBPF를 사용하여 SNAT 수행</span>
<span class="hljs-attr">bpf:</span>
  <span class="hljs-attr">masquerade:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 활성화를 하면 ipv4NativeRoutingCIDR values에 해당하는 대역과 native Route Table에서 local로 보내는 Rule이 있는 대역 제외 모든 대역에 대해 eBPF를 활용한 SNAT 활성화</span>
<span class="hljs-comment">#  # 이 설정은 cni chaining을 하고 있다면 사용 불가</span>
<span class="hljs-comment">#  hostLegacyRouting: false   # host network에서 발생하는 트래픽에 대해 legacy routing(iptables)를 사용하지 않도록 설정, eBPF를 사용하여 처리</span>

<span class="hljs-comment"># bpf.masquerade 설정: eBPF 기반 SNAT 활성화(NodePort 활설화 필수)</span>
<span class="hljs-attr">nodePort:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># NodePort 서비스에 대한 eBPF 기반 처리 활성화</span>

<span class="hljs-comment"># Cilium 설정: eBPF 소켓 로드 밸런싱</span>
<span class="hljs-attr">socketLB:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Cilium의 eBPF 소켓 로드 밸런싱 기능 활성화</span>
  <span class="hljs-attr">hostNamespaceOnly:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 호스트 네임스페이스에만 적용하도록 설정 for integration istio (https://docs.cilium.io/en/latest/network/servicemesh/istio/)</span>
  <span class="hljs-attr">tracing:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># eBPF 소켓 로드 밸런싱 트레이싱 활성화 (디버깅 용도)</span>

<span class="hljs-comment"># Cilium 설정: 호스트 방화벽</span>
<span class="hljs-attr">hostFirewall:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 호스트 방화벽 기능 활성화</span>

<span class="hljs-comment"># Cilium 설정: 엔드포인트 라우팅</span>
<span class="hljs-attr">endpointRoutes:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Cilium 엔드포인트 라우팅 활성화 (Pod 간 통신을 위한 라우팅)</span>

<span class="hljs-comment"># egress gateway 기능</span>
<span class="hljs-attr">egressGateway:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 특정 목적지에만 SNAT을 적용하고 싶을 때 true</span>

<span class="hljs-comment"># Cilum 설정: Pod ip 대역</span>
<span class="hljs-attr">ipv4NativeRoutingCIDR:</span> <span class="hljs-string">"100.64.0.0/18"</span> <span class="hljs-comment"># Pod Custom Networking CIDR 설정</span>

<span class="hljs-comment"># Cilium 설정: IP Masquerade Agent</span>
<span class="hljs-attr">ipMasqAgent:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">config:</span>
    <span class="hljs-attr">nonMasqueradeCIDRs:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span>

<span class="hljs-comment"># kube-proxy 대체: 완전히 제거하고 Cilium이 eBPF로 서비스 처리를 담당</span>
<span class="hljs-attr">kubeProxyReplacement:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># iptables와 kube-proxy 완전히 제거</span>

<span class="hljs-comment"># Cilium 설정: istio와의 통합</span>
<span class="hljs-attr">envoy:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Istio와의 통합을 위해 Envoy를 사용하지 않도록 설정 (Istio가 자체적으로 Envoy를 관리)</span>

<span class="hljs-comment"># Cilium resources 설정</span>
<span class="hljs-attr">resources:</span>
  <span class="hljs-attr">requests:</span>
    <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span>
    <span class="hljs-attr">memory:</span> <span class="hljs-string">512Mi</span>
  <span class="hljs-attr">limits:</span>
    <span class="hljs-attr">memory:</span> <span class="hljs-string">512Mi</span>

<span class="hljs-comment"># Hubble (가시성/관측 도구) 설정</span>
<span class="hljs-attr">hubble:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">relay:</span>
    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">ui:</span>
    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>

<span class="hljs-comment"># Prometheus 모니터링 (선택)</span>
<span class="hljs-attr">prometheus:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>
  <span class="hljs-attr">serviceMonitor:</span>
    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>

<span class="hljs-comment"># 디버깅 로깅 수준 (선택)</span>
<span class="hljs-attr">debug:</span>
  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>
</code></pre>
<p>내가 설정한 helm values는 위와 같다. 이미 AWS VPC CNI가 배포되어 있는 상태이기 때문에 위 helm values를 통해서 Cilium CNI를 helm install해서 배포했다.</p>
<pre><code class="hljs language-bash"><span class="hljs-comment"># Cilium repo add</span>
helm repo add cilium https://helm.cilium.io/
<span class="hljs-comment"># helm repo update</span>
helm repo update
<span class="hljs-comment"># Cilium Install</span>
helm upgrade --install cilium cilium/cilium -f values.yaml -n kube-system
</code></pre>
<h3>Node taint 설정</h3>
<p>Cilium을 설치하면서 networking은 Cilium이 담당하게 된다. 즉, Cilium Pod가 정상적으로 Running되기 전에는 Node에 다른 Pod들이 설치되거나 실행되면 안되다.</p>
<p>그래서 이러한 설정을 해주기 위해 taint를 설정한다.</p>
<h4>default node group</h4>
<pre><code class="hljs language-ini">resource "aws_eks_node_group" "default_node_group" {
  <span class="hljs-comment"># 중략</span>

  <span class="hljs-comment"># cilium cni가 실행되기 전에 다른 pod들이 scheduling 되지 않도록 한다.</span>
  taint {
    <span class="hljs-attr">key</span>    = <span class="hljs-string">"node.cilium.io/agent-not-ready"</span>
    <span class="hljs-attr">value</span>  = <span class="hljs-string">"true"</span>
    <span class="hljs-attr">effect</span> = <span class="hljs-string">"NO_EXECUTE"</span>
  }
}
</code></pre>
<h4>karpenter nodepool</h4>
<pre><code class="hljs language-yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">karpenter.sh/v1</span>
<span class="hljs-attr">kind:</span> <span class="hljs-string">NodePool</span>
<span class="hljs-attr">metadata:</span>
  <span class="hljs-attr">name:</span> { { <span class="hljs-string">.Values.nodePool.name</span> } }
<span class="hljs-attr">spec:</span>
  <span class="hljs-attr">template:</span>
    <span class="hljs-comment"># 중략</span>
    <span class="hljs-attr">spec:</span>
      <span class="hljs-attr">startupTaints:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node.cilium.io/agent-not-ready</span>
          <span class="hljs-attr">value:</span> <span class="hljs-string">"true"</span>
          <span class="hljs-attr">effect:</span> <span class="hljs-string">NoExecute</span>
      <span class="hljs-comment"># 중략</span>
</code></pre>
<h3>Remove kube-proxy</h3>
<p>Cilium을 이용해서 kube-proxy를 대체하고 있기 때문에 EKS의 kube-proxy addon을 제거했다.</p>
<p>나는 terraform으로 관리하고 있었기 때문에 eks addon에서 kube-proxy만 제거했다.</p>
<pre><code class="hljs language-ini">resource "aws_eks_addon" "kube_proxy" {
  <span class="hljs-attr">cluster_name</span>  = aws_eks_cluster.main.name
  <span class="hljs-attr">addon_name</span>    = <span class="hljs-string">"kube-proxy"</span>
  <span class="hljs-attr">addon_version</span> = <span class="hljs-string">"v1.33.0-eksbuild.2"</span>
}
</code></pre>
<p>이 부분을 제거했다.</p>
<h3>Result</h3>
<p><img src="/images/posts/contents/install-cilium-eks/installed-cilium.png" alt="installed-cilium"></p>
<p>AWS VPC CNI의 DaemonSet이 aws-node pod와 Cilium CNI의 DaemonSet이 Cilium pod가 동시에 실행되서 정상적으로 동작중인 것을 볼 수 있다.</p>
<p><img src="/images/posts/contents/install-cilium-eks/cilium-status.png" alt="cilium-status"></p>
<p>Cilium pod에 접속해서 cilium status 명령어를 실행해보면 AWS CNI와 chaining이 정상적으로 되어 있고 라우팅이 Native routing을 사용하는 것을 볼 수 있다.</p>
<h4>Hubble monitor</h4>
<p>hubble UI를 통해서 k8s의 namespace별 network를 볼 수 있다.</p>
<p><img src="/images/posts/contents/install-cilium-eks/hubble-ui.png" alt="hubble-ui"></p>
<p>hubble ui를 보면 어떤 components들 간에 네트워크 통신을 하고 있는지 ingress, egress, ip, port, identity까지 확인할 수 있다.</p>5:["$","div",null,{"className":"max-w-4xl mx-auto p-4 sm:p-8","children":[["$","div",null,{"className":"mb-8","children":["$","$Le",null,{"href":"/","className":"text-accent hover:underline flex items-center","children":[["$","svg",null,{"className":"w-4 h-4 mr-1","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","xmlns":"http://www.w3.org/2000/svg","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"2","d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"Back to home"]}]}],["$","h1",null,{"className":"text-4xl font-extrabold text-foreground mb-4 leading-tight","children":"EKS에 Cilium CNI 설치하기 (with CNI Chaining AWS VPC CNI Plugin)"}],["$","p",null,{"className":"text-lg text-muted-foreground mb-6","children":"2025-09-01"}],["$","div",null,{"className":"mb-6 flex flex-wrap gap-2","children":[["$","span","infra",{"className":"bg-blue-600/10 text-blue-400 px-2 py-0.5 rounded text-xs font-medium border border-blue-600/20","children":"infra"}]]}],["$","article",null,{"className":"prose lg:prose-xl prose-lg dark:prose-invert max-w-none","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}],["$","div",null,{"className":"mt-16 pt-8 border-t border-card","children":[["$","h2",null,{"className":"text-2xl font-bold text-foreground mb-6","children":"Comments"}],["$","$L10",null,{"repo":"comstering/comstering.github.io","repoId":"MDEwOlJlcG9zaXRvcnkzNjI0MjQ3NDk=","category":"Announcements","categoryId":"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyOTQ4OTYw","mapping":"pathname","strict":"0","reactionsEnabled":"1","emitMetadata":"0","inputPosition":"top","theme":"dark_high_contrast","lang":"ko","loading":"lazy"}]]}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
8:null
c:[["$","title","0",{"children":"EKS에 Cilium CNI 설치하기 (with CNI Chaining AWS VPC CNI Plugin)"}],["$","meta","1",{"name":"description","content":"Cilium CNI Chaining을 통해서 VPC CNI와 Cilium CNI를 함께 사용해보자"}],["$","meta","2",{"name":"keywords","content":"infra, kubernetes, k8s, eks, cilium, cni, vpc, taint, helm"}],["$","meta","3",{"property":"og:title","content":"EKS에 Cilium CNI 설치하기 (with CNI Chaining AWS VPC CNI Plugin)"}],["$","meta","4",{"property":"og:description","content":"Cilium CNI Chaining을 통해서 VPC CNI와 Cilium CNI를 함께 사용해보자"}],["$","meta","5",{"property":"og:url","content":"https://comstering.github.io/posts/install-cilium-eks"}],["$","meta","6",{"property":"og:image","content":"https://comstering.github.io/eks-cilium.png"}],["$","meta","7",{"property":"og:type","content":"article"}],["$","meta","8",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","9",{"name":"twitter:title","content":"EKS에 Cilium CNI 설치하기 (with CNI Chaining AWS VPC CNI Plugin)"}],["$","meta","10",{"name":"twitter:description","content":"Cilium CNI Chaining을 통해서 VPC CNI와 Cilium CNI를 함께 사용해보자"}],["$","meta","11",{"name":"twitter:image","content":"https://comstering.github.io/eks-cilium.png"}],["$","link","12",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"1024x1024"}]]
